{
  "name": "express-validation",
  "version": "0.6.0",
  "author": {
    "name": "Andrew Keig",
    "email": "andrew.keig@gmail.com"
  },
  "description": "express-validation is a middleware that validates the body, params, query, headers and cookies of a request and returns a response with errors; if any of the configured validation rules fail.",
  "homepage": "https://github.com/andrewkeig/express-validation",
  "contributors": [
    {
      "name": "Valerio Coltre",
      "email": "mister.gamer@gmail.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/andrewkeig/express-validation"
  },
  "dependencies": {
    "lodash": "^4.9.0"
  },
  "peerDependencies": {
    "joi": "^8.0.5"
  },
  "devDependencies": {
    "body-parser": "^1.14.2",
    "cookie-parser": "^1.4.1",
    "eslint": "^2.7.0",
    "express": "~4.x",
    "joi": "^8.0.5",
    "mocha": "^2.3.4",
    "should": "^8.1.1",
    "supertest": "^1.1.0"
  },
  "license": "MIT",
  "scripts": {
    "pretest": "eslint lib",
    "test": "mocha -R spec -b"
  },
  "main": "./lib/index",
  "keywords": [
    "express",
    "validation",
    "validate"
  ],
  "bugs": {
    "url": "https://github.com/andrewkeig/express-validation/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/andrewkeig/express-validation/raw/master/LICENSE"
    }
  ],
  "readme": "express-validation\n==================\n\nexpress-validation is a middleware that validates the `body`, `params`, `query`, `headers` and `cookies` of a request and returns a response with errors; if any of the configured validation rules fail.\n\n[![build status](https://travis-ci.org/AndrewKeig/express-validation.svg)](http://travis-ci.org/AndrewKeig/express-validation)\n\n## Install\n\n```sh\n$ npm install express-validation --save\n```\n\n\n## Supporting\n\n`express-validation` supports validating the following:\n\n- body\n- params\n- query\n- headers\n- cookies\n\n## Setup\nIn order to setup and use `express-validation` consider the following simple express application. It has a single route; configured to use the `express-validation` middleware; it accepts as input `validation.login`; which are the validation rules we have defined for this route.\n\n**file**: [`test/app.js`](test/app.js)\n```js\nvar express = require('express')\n  , validate = require('express-validation')\n  , http = require('http')\n  , bodyParser = require('body-parser')\n  , cookieParser = require('cookie-parser')\n  , app = express();\n\napp.use(bodyParser.json())\napp.use(cookieParser())\n\napp.set('port', 3000);\n\napp.post('/login', validate(validation.login), function(req, res){\n    res.json(200);\n});\n\n// error handler, required as of 0.3.0\napp.use(function(err, req, res, next){\n  res.status(400).json(err);\n});\n\nhttp.createServer(app);\n```\n\n\nThe following section defines our validation rules `validation.login`.  This is simply an object, which uses [https://github.com/spumko/joi](https://github.com/spumko/joi) to define validation rules for a request.\n\nWe have defined two rules `email` and `password`.  They are encapsulated inside `body`; which is important; as this defines their location, alternatives being, `params`, `query`, `headers` and `cookies`.\n\n**file**: [`test/validation/login.js`](test/validation/login.js)\n```js\nvar Joi = require('joi');\n\nmodule.exports = {\n  body: {\n    email: Joi.string().email().required(),\n    password: Joi.string().regex(/[a-zA-Z0-9]{3,30}/).required()\n  }\n};\n```\n\nThe following test, calls the route defined in our express application `/login`; it passes in a payload with an `email` and empty `password`.\n\n**file**: [`test/body.js`](test/body.js)\n```js\ndescribe('when the request has a missing item in payload', function () {\n  it('should return a 400 ok response and a single error', function(done){\n\n    var login = {\n        email: \"andrew.keig@gmail.com\",\n        password: \"\"\n    };\n\n    request(app)\n      .post('/login')\n      .send(login)\n      .expect(400)\n      .end(function (err, res) {\n        var response = JSON.parse(res.text);\n        response.errors.length.should.equal(1);\n        response.errors[0].messages.length.should.equal(2);\n        done();\n      });\n    });\n});\n```\n\nRunning the above test will produce the following response.\n\n```json\n{\n  \"status\": 400,\n  \"statusText\": \"Bad Request\",\n  \"errors\": [\n    {\n      \"field\": \"password\",\n      \"location\": \"body\",\n      \"messages\": [\n        \"the value of password is not allowed to be empty\",\n        \"the value of password must match the regular expression /[a-zA-Z0-9]{3,30}/\"\n      ],\n      \"types\": [ \"any.empty\", \"string.regex.base\" ]\n    }\n  ]\n}\n```\n\nFull code for these examples is to be found in [`test/`](test/) directory.\n\n## `req` objects gets parsed\nWhen `Joi` validates the `body`, `params`, `query`, `headers` or `cookies` it returns it as Javascript Object.\n\nExample without `express-validation`:\n```\napp.post('/login', function(req, res){\n  console.log(req.body); // => '{ \"email\": \"user@domain\", \"password\": \"pwd\" }'\n  res.json(200);\n});\n```\n\nExample with `express-validation`:\n```\nvar validate = require('express-validation');\nvar validation = require('./test/validation/login.js');\n\napp.post('/login', validate(validation.login), function(req, res){\n  console.log(req.body); // => { email: \"user@domain\", password: \"pwd\" }\n  res.json(200);\n});\n```\n\nThe difference might seem very slight, but it's a big deal.\nAll parts of a `request` will be either parsed, or throw errors.\n\n## Distinguish `Error`(s) from `ValidationError`(s)\nSince 0.4.0 `express-validation` calls `next()` with a `ValidationError`, a specific type of `Error`.\nThis can be very handy when writing more complex error handlers for your Express application, a brief example follows:\n\n```js\nvar ev = require('express-validation');\n\n// error handler\napp.use(function (err, req, res, next) {\n  // specific for validation errors\n  if (err instanceof ev.ValidationError) return res.status(err.status).json(err);\n\n  // other type of errors, it *might* also be a Runtime Error\n  // example handling\n  if (process.env.NODE_ENV !== 'production') {\n    return res.status(500).send(err.stack);\n  } else {\n    return res.status(500);\n  }\n});\n```\n\n## Options\n\n### Simple error response\nIf you would prefer to simply return a list of errors; you can flatten this structure; by passing an options array; with `flatten` set to `true`:\n\n```js\nmodule.exports.post = {\n  options : { flatten : true },\n  body: {\n    email: Joi.string().email().required(),\n    password: Joi.string().regex(/[a-zA-Z0-9]{3,30}/).required()\n  }\n};\n```\n\nThis will produce the following response; an array of strings.\n\n\n```js\n[\n  \"the value of password is not allowed to be empty\",\n  \"the value of password must match the regular expression /[a-zA-Z0-9]{3,30}/\"\n]\n\n```\n\n### Unknown schema items\n\nBy default, additional items outside of the schema definition will be allowed to pass validation.  To enforce strict checking, set the `allowUnknown\\*` options as follows:\n\n```js\nmodule.exports.post = {\n  options : {\n    allowUnknownBody: false,\n    allowUnknownHeaders: false,\n    allowUnknownQuery: false,\n    allowUnknownParams: false,\n    allowUnknownCookies: false },\n  ...\n};\n```\n\n### Specific Status codes and text\nBy default, the status code is set to `400`, and status text to `Bad Request`, you can change this behaviour with the following:\n\n```js\nmodule.exports.post = {\n  options: {\n    status: 422,\n    statusText: 'Unprocessable Entity'\n  },\n  ...\n};\n```\n\n### Global options\nStatus code and text can also be customized globally. At the same time specific behaviour still applies.\n\n```js\nvar ev = require('express-validation');\n// assign options\nev.options({\n  status: 422,\n  statusText: 'Unprocessable Entity'\n});\n\n// clear options back to default\nev.options();\n```\nThanks to node `require()` caching, all the other `express-validation` instances also have the same set of global options.\n\n## Working with headers\nWhen creating a validation object that checks `req.headers`; please remember to use `lowercase` names; node.js will convert incoming headers to lowercase:\n\n\n```js\nvar Joi = require('joi');\n\nmodule.exports = {\n  headers: {\n    accesstoken: Joi.string().required(),\n    userid : Joi.string().required()\n  }\n};\n```\n\n## Changelog\n\n0.6.0: `Joi` dependency moved to `peerDependencies`, it has to be installed at the same depth as `express-validation`. This is to avoid having to bump library version to update `Joi`.\n\n0.5.0: `req` objects gets parsed. `Joi` validates the `body`, `params`, `query`, `headers` or `cookies` and returns a Javascript Object.\n\n0.4.5: support for `Joi.ref` inside arrays, refer to #17 for an example\n\n0.4.4: support for Joi [`any.default`](https://github.com/hapijs/joi#anydefaultvalue-description), thanks to [@iheanyi](https://github.com/iheanyi)\n\n0.4.3: added cookies validation, thanks to [@aymericbeaumet](https://github.com/aymericbeaumet).\n\n0.4.2: errors have now a `types` array ([full reference in Joi source](https://github.com/hapijs/joi/blob/master/lib/language.js)), similar to `messages`, useful to sum up errors for internationalization purposes.\n\n0.4.1: added `options()` method to [globally override configuration](#global-options).\n\n0.4.0: `express-validation` now returns a `ValidationError`, not a simple `Error`. This offer some advantages [when writing error handlers](#distinguish-errors-from-validationerrors).\n\n0.3.0: prior to version 0.3.0, we returned a json error response straight out of the middleware, this changed in 0.3.0 to allow the express application itself to return the error response.  So from 0.3.0 onwards, you will need to add an express error handler, and return an error response.\n\n\n## License\n\nThis work is licensed under the MIT License (see the LICENSE file).\n\nhttps://github.com/AndrewKeig/express-validation/blob/master/LICENSE\n\n## Contributors\n  * Christian Holm https://github.com/holm\n  * Iheanyi Ekechukwu https://github.com/iheanyi\n  * Aymeric Beaumet https://github.com/aymericbeaumet\n  * Valerio Coltrè https://github.com/colthreepv\n  * gdw2 https://github.com/gdw2\n  * Robert Barbey https://github.com/rbarbey\n  * Stefan Lapers https://github.com/slapers\n",
  "readmeFilename": "README.md",
  "_id": "express-validation@0.6.0",
  "dist": {
    "shasum": "381845f141cad877cb9ae812f0d581bfb48c9849"
  },
  "_from": "express-validation@",
  "_resolved": "https://registry.npmjs.org/express-validation/-/express-validation-0.6.0.tgz"
}
